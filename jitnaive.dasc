// Let's JIT! And yes, emacs, this is -*-C-*- code.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>

#include <mach/mach.h>
#include <mach/mach_time.h>
#include <arpa/inet.h>

|.arch x64
|.actionlist actions
//|.externnames externnames
//|.section sec1
|.globals ident
//|.globalnames globalnames

// Let's allocate some registers!
// Calling convention: pass in *start, *end in RDI, RSI
|.define STARTPTR, rdi
|.define ENDPTR, rsi
// other vars: pos, char
|.define POS, rax

static void traceChar(char c) {
    printf("trace: %c\n", c);
}

static void trace4(uint32_t x) {
    printf("trace: %04x\n", x);
}

|.macro trace, c
|  push rdi; push rsi; push rax; push rbx
|  mov edi, c
|  mov64 rax, (uintptr_t)traceChar
|  call rax
|  pop rbx; pop rax; pop rsi; pop rdi
|.endmacro

|.macro trace4, c
|  push rdi; push rsi; push rax; push rbx
|  mov edi, c
|  mov64 rax, (uintptr_t)trace4
|  call rax
|  pop rbx; pop rax; pop rsi; pop rdi
|.endmacro

dasm_State *state;
void *globals[ident_MAX];
#define Dst &state

void emitSearchCodeForNeedle(char *needle) {
    |  mov POS, STARTPTR
    |1:
    |  cmp POS, ENDPTR; jge >3
    for (int i = 0; needle[i]; i++) {
        |  cmp byte [POS+(i)], (needle[i]); jne >2
    }
    |  mov rax, POS; sub rax, STARTPTR
    |  ret
    |2:
    |  inc POS
    |  jmp <1
    |3:
    |  mov eax, -1
    |  ret
}

void emitSearchCodeForNeedleWordAtATime(char *needle, int needleLen) {
    |  mov POS, STARTPTR
    |1:
    |  cmp POS, ENDPTR; jge >3;

    uint32_t *dwords = (uint32_t *)needle;
    int ndwords = needleLen / 4;
    for (int i = 0; i < ndwords; i++) {
        |  cmp dword [POS+(i)*4], (dwords[i]); jne >2
    }
    for (int i = ndwords*4; i < needleLen; i++) {
        |  cmp byte [POS+(i)], (needle[i]); jne >2
    }

    |  mov rax, POS; sub rax, STARTPTR
    |  ret
    |2:
    |  inc POS
    |  jmp <1
    |3:
    |  mov eax, -1
    |  ret
}

int main(int argc, char *argv[]) {
    dasm_init(&state, 1);
    dasm_setupglobal(&state, globals, ident_MAX);
    dasm_setup(&state, actions);

    char *needle = "theoretical fish";
    int needleLen = strlen(needle);
//    emitSearchCodeForNeedle(needle);
    emitSearchCodeForNeedleWordAtATime(needle, needleLen);

    // Link the code and write it to executable memory.
    int (*fptr)(char *start, char *end) = jitcode(&state);

    int haystackLen = 1438084;
    char *haystack = calloc(haystackLen + 1, sizeof(char));
    FILE *f = fopen("sicp.texi", "r");
    size_t sz = fread(haystack, sizeof(char), haystackLen, f);
    assert(sz == haystackLen);
    
    mach_timebase_info_data_t timebaseInfo;
    mach_timebase_info(&timebaseInfo);

    uint64_t start = mach_absolute_time();
    for (long i = 0; i < 1000; i++) {
        fptr(haystack, haystack + strlen(haystack) - needleLen);
    }
    uint64_t elapsed = mach_absolute_time() - start;
    uint64_t ns = elapsed * timebaseInfo.numer / timebaseInfo.denom;
    printf("Time: %0.3f ms\n", (double)ns / 1000000.0);

    // Free the machine code.
    free_jitcode(fptr);

    return 0;
}
