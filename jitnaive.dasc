// Let's JIT! And yes, emacs, this is -*-C-*- code.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>

|.arch x64
|.actionlist actions
//|.externnames externnames
//|.section sec1
|.globals ident
//|.globalnames globalnames

// Let's allocate some registers!
// Calling convention: pass in *start, *end in RDI, RSI
|.define STARTPTR, r12
|.define ENDPTR, r13
// other vars: pos, char
|.define POS, r14
|.define CHAR, r15

void traceChar(char c) {
    printf("trace: %c\n", c);
}

|.macro trace, c
|  mov edi, c
|  mov64 rax, (uintptr_t)traceChar
|  call rax
|.endmacro

#define Dst &state

int main(int argc, char *argv[]) {
    char *needle = "hello";
    int needleLen = strlen(needle);

    dasm_State *state;
    void *globals[ident_MAX];
    dasm_init(&state, 1);
    dasm_setupglobal(&state, globals, ident_MAX);
    dasm_setup(&state, actions);

    |  mov STARTPTR, rdi
    |  mov ENDPTR, rsi
    |  mov POS, STARTPTR
    |1:
    |  cmp POS, ENDPTR; jge >3
    |  cmp byte [POS+0], 104; jne >2
    |  cmp byte [POS+1], 101; jne >2
    |  cmp byte [POS+2], 108; jne >2
    |  cmp byte [POS+3], 108; jne >2
    |  cmp byte [POS+4], 111; jne >2
    |  mov rax, POS; sub rax, STARTPTR
    |  ret
    |2:
    |  inc POS
    |  jmp <1
    |3:
    |  mov eax, -1
    |  ret

    // Link the code and write it to executable memory.
    int (*fptr)(char *start, char *end) = jitcode(&state);

    // Call the JIT-ted function.
    char *haystack = "Eh, hello world";
    int ret = fptr(haystack, haystack + strlen(haystack) - needleLen);
    printf("ret = %i\n", ret);

    // Free the machine code.
    free_jitcode(fptr);

    return ret;
}
